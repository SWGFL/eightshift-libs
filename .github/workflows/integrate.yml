# yaml-language-server: $schema=https://json.schemastore.org/github-workflow

name: "Integrate"

on:
  push:
    branches:
      - "develop"
      - "main"
    paths-ignore:
      - "**.md"
  pull_request:
    paths-ignore:
      - "**.md"

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  byte_level:
    name: "0️⃣ Byte-level"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Check file permissions"
        run: |
          test "$(find . -type f -not -path './.git/*' -executable)" = ""

      - name: "Find non-printable ASCII characters"
        run: |
          ! LC_ALL=C.UTF-8 find . -type f -name "*.php" -print0 | xargs -0 -- grep -PHn "[^\t -~]"

  syntax_errors:
    name: "1️⃣ Syntax errors"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "7.4"
          coverage: "none"

      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Install dependencies"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "highest"

      - name: "Check source code for syntax errors"
        run: "composer exec -- parallel-lint src/ tests/"
        # @TODO Check template files for syntax errors

  unit_tests:
    name: "2️⃣ Unit and functional tests"
    needs:
      - "byte_level"
      - "syntax_errors"
    strategy:
      fail-fast: false
      matrix:
        php-version:
          - "7.4"
        dependencies:
          - "lowest"
          - "highest"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          coverage: "pcov"

      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Install dependencies"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "${{ matrix.dependencies }}"

      - name: "Execute unit tests"
        run: "composer run test:coverage"
        # @TODO Functional tests

      - name: "Upload coverage to Codecov"
        env:
          CODECOV_TOKEN: "${{ secrets.CODECOV_TOKEN }}"
        if: "env.CODECOV_TOKEN && matrix.php-version == '7.4' && matrix.dependencies == 'highest'"
        uses: "codecov/codecov-action@v3"
        with:
          token: "${{ env.CODECOV_TOKEN }}"
          files: "./tests/coverage/clover.xml"
          flags: "unittests"
          name: "libs-codecov"
          fail_ci_if_error: "true"

  static_analysis:
    name: "3️⃣ Static Analysis"
    needs:
      - "byte_level"
      - "syntax_errors"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "7.4"
          coverage: "none"

      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Validate Composer configuration"
        run: "composer validate --strict"

      - name: "Install dependencies"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "highest"

      - name: "Execute static analysis"
        run: "composer run test:types"
        # @TODO Magic Number Detector, Copy-Paste Detector

  coding_standards:
    name: "4️⃣ Coding Standards"
    needs:
      - "byte_level"
      - "syntax_errors"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Set up PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "7.4"
          coverage: "none"
          tools: "cs2pr"

      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Check adherence to EditorConfig"
        uses: "greut/eclint-action@v0"
        with:
          eclint_args: "-exclude tests/data/geolocation"

      - name: "Install dependencies"
        uses: "ramsey/composer-install@v2"
        with:
          dependency-versions: "highest"

      - name: "Check coding style"
        run: |
          composer run test:standards -- -q --report=checkstyle | cs2pr

  exported_files:
    name: "5️⃣ Exported files"
    needs:
      - "byte_level"
      - "syntax_errors"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v3"

      - name: "Check exported files"
        run: |
          EXPECTED="LICENSE,README.md,composer.json"
          CURRENT="$(git archive HEAD | tar --list --exclude="src" --exclude="src/*" | paste -s -d ",")"
          echo "CURRENT =${CURRENT}"
          echo "EXPECTED=${EXPECTED}"
          test "${CURRENT}" = "${EXPECTED}"
